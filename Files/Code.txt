6 #
2 include
4 <
2 iostream
4 >
6 #
2 include
4 <
2 fstream
4 >
6 #
2 include
4 <
2 string
4 >
6 #
2 include
4 <
2 cctype
4 >
1 using
1 namespace
1 std
5 ;
1 enum
2 states
5 {
2 Start
4 ,
2 A
4 ,
2 B
4 ,
2 C
4 ,
2 E
4 ,
2 F
4 ,
2 G
4 ,
2 H
4 ,
2 I
5 }
5 ;
2 bool
2 IsOperation
5 (
2 char
2 x
5 )
5 {
2 ifstream
2 fin
5 (
3 "Operations.txt"
5 )
5 ;
2 char
2 a
5 ;
1 for
5 (
2 a
4 =
2 fin
5 .
2 get
5 (
5 )
5 ;
4 !
2 fin
5 .
2 eof
5 (
5 )
5 ;
2 fin
5 .
2 get
5 (
5 )
4 ,
2 a
4 =
2 fin
5 .
2 get
5 (
5 )
5 )
5 {
1 if
5 (
2 a
4 ==
2 x
5 )
5 {
1 return
2 true
5 ;
5 }
5 }
1 return
2 false
5 ;
5 }
2 bool
2 IsSign
5 (
2 char
2 x
5 )
5 {
2 ifstream
2 fin
5 (
3 "C:\\Users\\USER\\Desktop\\Транслятор\\Signs.txt"
5 )
5 ;
2 char
2 a
5 ;
1 for
5 (
2 a
4 =
2 fin
5 .
2 get
5 (
5 )
5 ;
4 !
2 fin
5 .
2 eof
5 (
5 )
5 ;
2 fin
5 .
2 get
5 (
5 )
4 ,
2 a
4 =
2 fin
5 .
2 get
5 (
5 )
5 )
5 {
1 if
5 (
2 a
4 ==
2 x
5 )
5 {
1 return
2 true
5 ;
5 }
5 }
1 return
2 false
5 ;
5 }
2 bool
2 IsWord
5 (
2 string
2 s
5 )
5 {
2 ifstream
2 fin
5 (
3 "C:\\Users\\USER\\Desktop\\Транслятор\\Words.txt"
5 )
5 ;
2 string
2 a
5 ;
1 for
5 (
2 fin
4 >>
2 a
5 ;
4 !
2 fin
5 .
2 eof
5 (
5 )
5 ;
2 fin
5 .
2 get
5 (
5 )
4 ,
2 fin
4 >>
2 a
5 )
5 {
1 if
5 (
2 a
4 ==
2 s
5 )
5 {
1 return
2 true
5 ;
5 }
5 }
1 if
5 (
2 a
4 ==
2 s
5 )
5 {
1 return
2 true
5 ;
5 }
1 return
2 false
5 ;
5 }
2 int
2 main
5 (
5 )
5 {
2 ifstream
2 fin
5 (
3 "C:\\Users\\USER\\Desktop\\Транслятор\\Program.txt"
5 )
5 ;
2 ofstream
2 fout
5 (
3 "C:\\Users\\USER\\Desktop\\Транслятор\\Code.txt"
5 )
5 ;
2 char
2 x
4 ,
2 a
5 ;
2 string
2 s
5 ;
2 states
2 state
4 =
2 Start
5 ;
1 for
5 (
5 ;
4 !
2 fin
5 .
2 eof
5 (
5 )
5 ;
5 )
5 {
1 switch
5 (
2 state
5 )
5 {
1 case
2 Start
5 :
2 x
4 =
2 fin
5 .
2 get
5 (
5 )
5 ;
1 if
5 (
2 x
4 ==
2 EOF
5 )
1 return
3 1
5 ;
1 if
5 (
2 x
4 ==
3 ' '
4 ||
2 x
4 ==
3 '\n'
4 ||
2 x
4 ==
3 '	'
5 )
5 {
2 state
4 =
2 Start
5 ;
5 }
2 else
1 if
5 (
2 x
4 ==
3 '/'
5 )
5 {
2 state
4 =
2 G
5 ;
5 }
2 else
1 if
5 (
2 isalpha
5 (
2 x
5 )
4 ||
2 x
4 ==
3 '_'
5 )
5 {
2 state
4 =
2 C
5 ;
5 }
2 else
1 if
5 (
2 isdigit
5 (
2 x
5 )
5 )
5 {
2 state
4 =
2 B
5 ;
5 }
2 else
1 if
5 (
2 x
4 ==
3 '"'
4 ||
2 x
4 ==
3 39
5 )
5 {
2 state
4 =
2 E
5 ;
5 }
2 else
1 if
5 (
2 IsOperation
5 (
2 x
5 )
5 )
5 {
2 state
4 =
2 A
5 ;
5 }
2 else
1 if
5 (
2 IsSign
5 (
2 x
5 )
5 )
5 {
2 state
4 =
2 Start
5 ;
2 fout
4 <<
3 "5 "
4 <<
2 x
4 <<
3 "\n"
5 ;
5 }
2 else
5 {
2 state
4 =
2 Start
5 ;
2 fout
4 <<
3 "6 "
4 <<
2 x
4 <<
3 "\n"
5 ;
5 }
1 break
5 ;
1 case
2 A
5 :
2 fout
4 <<
3 "4 "
4 <<
2 x
5 ;
2 a
4 =
2 fin
5 .
2 peek
5 (
5 )
5 ;
1 if
5 (
2 IsOperation
5 (
2 a
5 )
5 )
5 {
1 if
5 (
2 a
4 ==
2 x
4 &&
2 a
4 !=
3 '!'
4 &&
2 a
4 !=
3 '%'
4 &&
2 a
4 !=
3 ','
4 &&
2 a
4 !=
3 '~'
5 )
5 {
2 fout
4 <<
2 x
5 ;
2 fin
5 .
2 get
5 (
5 )
5 ;
5 }
2 else
1 if
5 (
2 x
4 !=
3 ','
4 &&
2 a
4 ==
3 '='
4 ||
2 x
4 ==
3 '-'
4 &&
2 a
4 ==
3 '>'
5 )
5 {
2 fout
4 <<
2 a
5 ;
2 fin
5 .
2 get
5 (
5 )
5 ;
5 }
5 }
2 fout
4 <<
3 "\n"
5 ;
2 state
4 =
2 Start
5 ;
1 break
5 ;
1 case
2 B
5 :
2 fout
4 <<
3 "3 "
4 <<
2 x
5 ;
1 for
5 (
2 x
4 =
2 fin
5 .
2 peek
5 (
5 )
5 ;
2 isdigit
5 (
2 x
5 )
5 ;
2 fout
4 <<
2 x
4 ,
2 fin
5 .
2 get
5 (
5 )
4 ,
2 x
4 =
2 fin
5 .
2 peek
5 (
5 )
5 )
5 ;
2 fout
4 <<
3 "\n"
5 ;
2 state
4 =
2 Start
5 ;
1 if
5 (
2 isalpha
5 (
2 x
5 )
5 )
5 {
2 cout
4 <<
3 "Error"
4 <<
3 "\n"
5 ;
1 return
3 1
5 ;
5 }
1 break
5 ;
1 case
2 C
5 :
2 s
4 =
3 ""
5 ;
2 s
4 +=
2 x
5 ;
2 state
4 =
2 Start
5 ;
1 for
5 (
2 x
4 =
2 fin
5 .
2 peek
5 (
5 )
5 ;
2 isalnum
5 (
2 x
5 )
4 ||
2 x
4 ==
3 '_'
5 ;
2 s
4 +=
2 x
4 ,
2 fin
5 .
2 get
5 (
5 )
4 ,
2 x
4 =
2 fin
5 .
2 peek
5 (
5 )
5 )
5 ;
1 if
5 (
2 IsWord
5 (
2 s
5 )
5 )
5 {
2 fout
4 <<
3 "1 "
5 ;
5 }
2 else
5 {
2 fout
4 <<
3 "2 "
5 ;
5 }
2 fout
4 <<
2 s
4 <<
3 "\n"
5 ;
1 break
5 ;
1 case
2 E
5 :
2 fout
4 <<
3 "3 "
4 <<
2 x
5 ;
2 a
4 =
2 x
5 ;
1 for
5 (
2 x
4 =
2 fin
5 .
2 get
5 (
5 )
5 ;
2 x
4 !=
2 a
5 ;
2 fout
4 <<
2 x
4 ,
2 x
4 =
2 fin
5 .
2 get
5 (
5 )
5 )
5 ;
2 fout
4 <<
2 x
4 <<
3 "\n"
5 ;
2 state
4 =
2 Start
5 ;
1 break
5 ;
1 case
2 G
5 :
2 x
4 =
2 fin
5 .
2 peek
5 (
5 )
5 ;
1 if
5 (
2 x
4 ==
3 '/'
5 )
5 {
2 state
4 =
2 H
5 ;
2 fin
5 .
2 get
5 (
5 )
5 ;
5 }
2 else
1 if
5 (
2 x
4 ==
3 '*'
5 )
5 {
2 fin
5 .
2 get
5 (
5 )
5 ;
2 state
4 =
2 I
5 ;
5 }
2 else
1 if
5 (
2 x
4 ==
3 '='
5 )
5 {
2 fin
5 .
2 get
5 (
5 )
5 ;
2 fout
4 <<
3 "4 /=\n"
5 ;
2 state
4 =
2 Start
5 ;
5 }
2 else
5 {
2 fout
4 <<
3 "4 /\n"
5 ;
2 state
4 =
2 Start
5 ;
5 }
1 break
5 ;
1 case
2 H
5 :
1 for
5 (
2 x
4 =
2 fin
5 .
2 get
5 (
5 )
5 ;
2 x
4 !=
3 '\n'
4 &&
2 x
4 !=
2 EOF
5 ;
2 x
4 =
2 fin
5 .
2 get
5 (
5 )
5 )
5 ;
2 state
4 =
2 Start
5 ;
1 break
5 ;
1 case
2 I
5 :
1 for
5 (
2 x
4 =
2 fin
5 .
2 get
5 (
5 )
5 ;
2 x
4 !=
2 EOF
5 ;
5 )
5 {
1 if
5 (
2 x
4 ==
3 '*'
5 )
5 {
2 x
4 =
2 fin
5 .
2 get
5 (
5 )
5 ;
1 if
5 (
2 x
4 ==
3 '/'
5 )
5 {
1 break
5 ;
5 }
5 }
2 else
5 {
2 x
4 =
2 fin
5 .
2 get
5 (
5 )
5 ;
5 }
5 }
2 state
4 =
2 Start
5 ;
1 break
5 ;
2 default
5 :
1 break
5 ;
5 }
5 }
5 }
